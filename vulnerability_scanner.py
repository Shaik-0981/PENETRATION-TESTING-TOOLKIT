
import requests
from urllib.parse import urljoin

# Function to check for SQL Injection vulnerability
def check_sql_injection(url):
    payload = "' OR 1=1 --"
    # If the URL doesn't have a query parameter, add one
    if '?' in url:
        test_url = url + payload
    else:
        test_url = url + "?id=" + payload  # Assume the parameter is "id"
    
    try:
        response = requests.get(test_url)
        if "error" in response.text.lower():  # Check for SQL errors
            print(f"[+] Potential SQL Injection vulnerability found at: {test_url}")
        else:
            print(f"[-] No SQL Injection vulnerability at: {test_url}")
    except requests.exceptions.RequestException as e:
        print(f"Error checking SQL Injection: {e}")

# Function to check for Cross-Site Scripting (XSS) vulnerability
def check_xss(url):
    payload = "<script>alert('XSS')</script>"
    # If the URL doesn't have a query parameter, add one
    if '?' in url:
        test_url = url + payload
    else:
        test_url = url + "?id=" + payload  # Assume the parameter is "id"
    
    try:
        response = requests.get(test_url)
        if payload in response.text:
            print(f"[+] Potential XSS vulnerability found at: {test_url}")
        else:
            print(f"[-] No XSS vulnerability at: {test_url}")
    except requests.exceptions.RequestException as e:
        print(f"Error checking XSS: {e}")

# Function to scan for vulnerabilities on the target URL
def check_vulnerabilities(url):
    print(f"Scanning {url} for common vulnerabilities...\n")
    
    # Check for SQL Injection vulnerability
    check_sql_injection(url)
    
    # Check for XSS vulnerability
    check_xss(url)

# Main function to take user input and start scanning
def main():
    target_url = input("Enter the target URL (e.g., http://juice-shop.herokuapp.com): ").strip()

    # Ensure the URL has the http:// prefix
    if not target_url.startswith("http://") and not target_url.startswith("https://"):
        target_url = "http://" + target_url

    print(f"Starting vulnerability scan on {target_url}...\n")
    scan_vulnerabilities(target_url)

if __name__ == "__main__":
    main()
